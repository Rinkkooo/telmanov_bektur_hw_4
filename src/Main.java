import java.util.Random;public class Main {    public static int bossHealth = 1500;    public static int bossDamage = 50;    public static String bossDefence;    public static int[] heroesHealth = {300, 270, 250, 300, 260};    public static int[] heroesDamage = {20, 15, 10, 20, 30};    public static String[] heroesAttackType = {"Physical", "Magical", "Piercing", "lucky", "Thor"};    public static String medic = "Medic";    public static int medicHealth = 350;    public static int roundNumber = 0;    public static void main(String[] args) {        showStatistics();        while (!isGameOver()) {            playRound();        }    }    public static boolean isGameOver() {        if (bossHealth <= 0) {            System.out.println("Heroes won!!!");            return true;        }        /*if (heroesHealth[0] <= 0 && heroesHealth[1] <= 0 && heroesHealth[2] <= 0) {            System.out.println("Boss won!!!");            return true;        }        return false;*/        boolean allHeroesDead = true;        for (int i = 0; i < heroesHealth.length; i++) {            if (heroesHealth[i] > 0) {                allHeroesDead = false;                break;            }        }        if (allHeroesDead) {            System.out.println("Boss won!!!");        }        return allHeroesDead;    }    public static void chooseBossDefence() {        Random random = new Random();        int randomIndex = random.nextInt(heroesAttackType.length); // 0,1,2        bossDefence = heroesAttackType[randomIndex];    }    public static void playRound() {        roundNumber++;        chooseBossDefence();        if (bossStunned()) {            System.out.println("Boss is stunned and skips the turn!");        } else {            bossAttacks();            heroesAttack();            healing();        }        showStatistics();    }    public static void bossAttacks() {        medicHealth = medicHealth - bossDamage;        if (medicHealth < 0){            medicHealth = 0;        }        if (bossDefence.equals("Thor")) {            if (bossStunned()) {                return;            }        }        for (int i = 0; i < heroesHealth.length; i++) {            if (heroesAttackType[i].equals("lucky")){                float evade = 0.2f;                if (Math.random() < evade){                    System.out.println("Lucky dodged attack");                    return;                }            }            if (heroesHealth[i] > 0) {                heroesHealth[i] = heroesHealth[i] - bossDamage;                if (heroesHealth[i] < 0) {                    heroesHealth[i] = 0;                }            }        }    }    public static void heroesAttack() {        for (int i = 0; i < heroesDamage.length; i++) {            if (heroesHealth[i] > 0 && bossHealth > 0) {                int damage = heroesDamage[i];                if (heroesAttackType[i] == bossDefence) {                    Random random = new Random();                    int coeff = random.nextInt(9) + 2; // 2,3,4,5,6,7,8,9,10                    damage = heroesDamage[i] * coeff;                    System.out.println("Critical damage: " + damage);                }                bossHealth = bossHealth - damage;                if (bossHealth < 0) {                    bossHealth = 0;                }            }            if (heroesAttackType[i].equals("Thor")){                Random random = new Random();                boolean stun = random.nextBoolean();                if (stun){                    return;                }            }        }    }    public static void showStatistics() {        System.out.println("ROUND " + roundNumber + " -------------");        /*String defence;        if (bossDefence == null) {            defence = "No defence";        } else {            defence = bossDefence;        }*/        System.out.println("Boss health: " + bossHealth + " damage: "                + bossDamage + " defence: " + (bossDefence == null ? "No defence" : bossDefence));        System.out.println("Medic health: " + medicHealth);        for (int i = 0; i < heroesHealth.length; i++) {            System.out.println(heroesAttackType[i] + " health: " + heroesHealth[i] + " damage: "                    + heroesDamage[i]);        }    }    public static void healing(){        for (int i = 0; i < heroesHealth.length; i++) {            if (medicHealth <= 0 ){                break;            }            if (heroesHealth[i] == 0){                continue;            }            if (heroesHealth[i] > 100){                continue;            }else{                Random random = new Random();                int heal = random.nextInt(20) + 10;                heroesHealth[i] += heal;                System.out.println("Medic heal " + heroesAttackType[i] + " on " + heal + " hp");                break;            }        }    }    public static boolean bossStunned() {        Random random = new Random();        boolean stun = random.nextBoolean();        if (stun) {            System.out.println("Thor stunned Boss");            return true;        }        return false;    }}